#!/usr/bin/env python
import sys
import shutil
import traceback
from typing import Optional, List, Tuple, Dict

import typer
import rich
from rich.columns import Columns
from rich.console import Console
from rich.traceback import install

# fmt: off
# Mapping from labels to colors
LABELS = {
    "9PCHAN": "magenta",
    "9P": "white",
    "9POBJ": "bright_blue",
    "MEMFS": "bright_red",
    "FSCLNT": "bright_green",
    "KV": "bright_magenta",
    "SHARDER" : "bright_white",
    "NAMED" : "bright_yellow",
    "SCHEDD" : "red",
}
# fmt: on

def list_labels(value: Optional[str]):
    if value is None:
        return value
    labels = value.split(",")
    for label in labels:
        if label not in LABELS:
            raise typer.BadParameter(f"label {label} not recognized")
    return labels


def exiting(label, msg):
    return label == "9POBJ" and msg[0] == "Done"

def mkCols(f):
    cols = {}
    col = 0
    freelist = []
    input_ = f if f else sys.stdin
    for line in input_:
        try:
            date, time, src, label, *msg = line.strip().split(" ")
            if exiting(label, msg):
                freelist = freelist + [cols[src]]
            if not src in cols:
                c = col
                if len(freelist) > 0:
                    c = freelist.pop(0)
                else:
                    col += 1
                cols[src] = c
        except ValueError:
            continue
    f.seek(0)
    return (cols, col)

def header(running, columns, n, width):
    cols = []
    for k in running.keys():
        cols = cols + [k]
    col_width = int(width / n)
    cols = Columns(cols, width=col_width - 1, equal=True, expand=True)
    print("-" * width)
    rich.print(cols)
    
def main(
    file: typer.FileText = typer.Argument(None, help="File to read, stdin otherwise"),
    colorize: bool = typer.Option(True, "--no-color"),
    ignore: Optional[str] = typer.Option(None, "--ignore", "-i", callback=list_labels),
    just: Optional[str] = typer.Option(None, "--just", "-j", callback=list_labels),
):
    labels = list(LABELS)
    columns, n_columns = mkCols(file)

    # We can take input from a stdin (pipes) or from a file
    input_ = file if file else sys.stdin
    # Print just some labels or exclude some labels (good for avoiding verbose ones)
    if just:
        labels = just
    if ignore:
        labels = [lvl for lvl in labels if lvl not in set(ignore)]

    labels = set(labels)
    console = Console()
    width = console.size.width

    panic = False
    running = {}
    for line in input_:
        try:
            date, time, src, label, *msg = line.strip().split(" ")

            if not src  in running:
                running[src] = True
                header(running, columns, n_columns, width)
            if exiting(label, msg):
                running[src] = False
                header(running, columns, n_columns, width)

            # To ignore some labels
            if label not in labels:
                continue

            # msg = label + " " + " ".join(msg)
            msg = " ".join(msg)

            # otherwise, rich doesn't print string slices like "[schedd]"
            msg = msg.replace("[", "\[")

            # Colorize output by using rich syntax when needed
            if colorize and label in LABELS:
                color = LABELS[label]
                msg = f"[{color}]{msg}[/{color}]"
                
            if n_columns is None:
                rich.print(time, msg)
                
            # Multi column printing, timing is dropped to maximize horizontal
            # space. Heavylifting is done through rich.column.Columns object
            else:
                cols = ["" for _ in range(n_columns)]
                msg = "" + msg
                cols[columns[src]] = msg
                col_width = int(width / n_columns)
                cols = Columns(cols, width=col_width - 1, equal=True, expand=True)
                rich.print(cols)
        except  ValueError:
            # Code from tests or panics does not follow format
            # so we print it as is
            if line.startswith("panic"):
                panic = True
            # Output from tests is usually important so add a
            # horizontal line with hashes to make it more obvious
            if not panic:
                print("#" * console.width)
            print(line, end="")


if __name__ == "__main__":
    typer.run(main)
